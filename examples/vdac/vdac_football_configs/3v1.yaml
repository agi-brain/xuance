dl_toolbox: "torch"  # The deep learning toolbox. Choices: "torch", "mindspore", "tensorlayer"
project_name: "XuanCe_Benchmark"
logger: "tensorboard"  # Choices: tensorboard, wandb.
wandb_user_name: "your_user_name"
render: False
render_mode: 'rgb_array' # Choices: 'human', 'rgb_array'.
fps: 15
test_mode: False
device: "cuda:0"  # Choose an calculating device. PyTorch: "cpu", "cuda:0"; TensorFlow: "cpu"/"CPU", "gpu"/"GPU"; MindSpore: "CPU", "GPU", "Ascend", "Davinci".
distributed_training: False  # Whether to use multi-GPU for distributed training.
master_port: '12355'  # The master port for current experiment when use distributed training.

agent: "VDAC"  # the learning algorithms_marl
# environment settings
env_name: "Football"
scenario: "academy_3_vs_1_with_keeper"
env_seed: 1
use_stacked_frames: False  # Whether to use stacked_frames
num_agent: 3
num_adversary: 0
obs_type: "simple115v2"  # representation used to build the observation, choices: ["simple115v2", "extracted", "pixels_gray", "pixels"]
rewards_type: "scoring,checkpoints"  # comma separated list of rewards to be added
smm_width: 96  # width of super minimap
smm_height: 72  # height of super minimap
episode_length: 200
learner: "VDAC_Learner"
policy: "Categorical_MAAC_Policy"
representation: "Basic_RNN"
vectorize: "Subproc_Football"

# recurrent settings for Basic_RNN representation
use_rnn: True
rnn: "GRU"
recurrent_layer_N: 1
fc_hidden_sizes: [64]
recurrent_hidden_size: 64
N_recurrent_layers: 1
dropout: 0
normalize: "LayerNorm"
initialize: "orthogonal"
gain: 0.01

actor_hidden_size: [64, 64]
critic_hidden_size: [64, 64]
activation: "relu"
use_parameter_sharing: True  # If to use parameter sharing for all agents' policies.
use_actions_mask: False  # If to use actions mask for unavailable actions.

mixer: "QMIX"  # choices: VDN (sum), QMIX (monotonic)
hidden_dim_mixing_net: 32  # hidden units of mixing network
hidden_dim_hyper_net: 64  # hidden units of hyper network

seed: 1
parallels: 50
buffer_size: 50
n_epochs: 15
n_minibatch: 2
learning_rate: 5.0e-4
weight_decay: 0

vf_coef: 1.0
ent_coef: 0.01
gamma: 0.99  # discount factor

# tricks
use_linear_lr_decay: False  # if use linear learning rate decay
end_factor_lr_decay: 0.5
use_global_state: False  # if use global state to calculate values
use_value_clip: True  # limit the value range
value_clip_range: 0.2
use_value_norm: True  # use running mean and std to normalize rewards.
use_huber_loss: True  # True: use huber loss; False: use MSE loss.
huber_delta: 10.0
use_advnorm: True  # use advantage normalization.
use_gae: True  # use GAE trick to calculate returns.
gae_lambda: 0.95
use_grad_clip: True  # gradient normalization
grad_clip_norm: 10.0

running_steps: 25000000
eval_interval: 200000
test_episode: 50

log_dir: "./logs/vdac/"
model_dir: "./models/vdac/"
videos_dir: "./videos/vdac/"
