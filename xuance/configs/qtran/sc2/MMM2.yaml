agent: "QTRAN_base"  # Options: QTRAN_base, QTRAN_alt
env_name: "StarCraft2"  # Name of the environment.
env_id: "MMM2"
env_seed: 1  # The random seed of the environment.
fps: 15  # Frames per second.
learner: "QTRAN_Learner"
policy: "Qtran_Mixing_Q_network"
representation: "Basic_RNN"
vectorize: "Subproc_StarCraft2"
runner: "RunnerStarCraft2"

# recurrent settings for Basic_RNN representation
use_rnn: True  # Whether to use recurrent neural networks.
rnn: "GRU"  # Choice of recurrent networks: GRU or LSTM.
N_recurrent_layers: 1  # Number of recurrent layers.
fc_hidden_sizes: [64, ]
recurrent_hidden_size: 64
dropout: 0  # dropout should be a number in range [0, 1], the probability of an element being zeroed.

representation_hidden_size: [64, ]
q_hidden_size: [64, ]  # the units for each hidden layer
activation: "relu"  # The activation function of each hidden layer.
use_parameter_sharing: True
use_actions_mask: True

hidden_dim_mixing_net: 64  # hidden units of mixing network
hidden_dim_hyper_net: 64  # hidden units of hyper network
qtran_net_hidden_dim: 64
lambda_opt: 1.0
lambda_nopt: 1.0

seed: 1
parallels: 8
buffer_size: 5000
batch_size: 32
learning_rate: 0.0007
gamma: 0.99  # discount factor
double_q: True  # use double q learning

start_greedy: 1.0
end_greedy: 0.05
decay_step_greedy: 1000000
start_training: 1000  # start training after n steps
running_steps: 10000000  # 10M
n_epochs: 8  # The number of training epochs after interaction.
sync_frequency: 200

use_grad_clip: False
grad_clip_norm: 0.5

eval_interval: 100000
test_episode: 16

log_dir: "./logs/qtran/"
model_dir: "./models/qtran/"
