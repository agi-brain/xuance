agent: "VDAC"
env_name: "StarCraft2"
env_id: "3m"
fps: 15
policy: "Categorical_MAAC_Policy_Share"
representation: "Basic_RNN"
vectorize: "Subproc_StarCraft2"
runner: "StarCraft2_Runner"

# recurrent settings for Basic_RNN representation
use_rnn: True
rnn: "GRU"
recurrent_layer_N: 1
fc_hidden_sizes: [64,]
recurrent_hidden_size: 64
N_recurrent_layers: 1
dropout: 0
normalize: "LayerNorm"
initialize: "orthogonal"
gain: 0.01

actor_hidden_size: []
critic_hidden_size: []
activation: "relu"

mixer: "QMIX"  # choices: Independent, VDN (sum), QMIX (monotonic)
hidden_dim_mixing_net: 32  # hidden units of mixing network
hidden_dim_hyper_net: 64  # hidden units of hyper network

seed: 1
parallels: 8
buffer_size: 8
n_epoch: 1
n_minibatch: 1
learning_rate: 0.0007  # 7e-4
weight_decay: 0

vf_coef: 1.0
ent_coef: 0.0
clip_range: 0.2
clip_type: 1  # Gradient clip for Mindspore: 0: ms.ops.clip_by_value; 1: ms.nn.ClipByNorm()
gamma: 0.99  # discount factor

# tricks
use_linear_lr_decay: False  # if use linear learning rate decay
end_factor_lr_decay: 0.5
use_grad_clip: True  # gradient normalization
grad_clip_norm: 10.0
use_value_norm: False  # use running mean and std to normalize rewards.
use_advnorm: False  # use advantage normalization.
use_gae: True  # use GAE trick to calculate returns.
gae_lambda: 0.95

start_training: 1
running_steps: 1000000
training_frequency: 1

eval_interval: 5000
test_episode: 16
log_dir: "./logs/vdac/"
model_dir: "./models/vdac/"
