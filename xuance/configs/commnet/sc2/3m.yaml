agent: "CommNet"
env_name: "StarCraft2"
env_id: "3m"
env_seed: 1
learner: "CommNet_Learner"
policy: "CommNet_Policy"
representation: "Basic_RNN"
vectorize: "Subproc_StarCraft2"
runner: "RunnerStarCraft2"

# recurrent settings for Basic_RNN representation
use_rnn: True  # Whether to use recurrent neural networks.
rnn: "LSTM"
N_recurrent_layers: 1  # Number of recurrent layers.
fc_hidden_sizes: [64, 64, 64]
recurrent_hidden_size: 64
dropout: 0
normalize: "LayerNorm"
initialize: "orthogonal"
gain: 0.01

actor_hidden_size: []
critic_hidden_size: []
activation: "relu"  # The activation function of each hidden layer.
use_parameter_sharing: True  # If to use parameter sharing for all agents' policies.
use_actions_mask: True  # If to use actions mask for unavailable actions.

seed: 1
parallels: 8
buffer_size: 128
n_epochs: 15
n_minibatch: 1
learning_rate: 0.0007     # 1e-4
weight_decay: 0

vf_coef: 1.0  # Coefficient factor for critic loss.
ent_coef: 0.01  # Coefficient factor for entropy loss.
target_kl: 0.25
clip_range: 0.2
clip_type: 1  # Gradient clip for Mindspore: 0: ms.ops.clip_by_value; 1: ms.nn.ClipByNorm()
gamma: 0.99  # discount factor

# tricks
use_linear_lr_decay: True  # if use linear learning rate decay
end_factor_lr_decay: 0.5
lr_decay_steps: 1000
use_global_state: False  # if use global state to calculate values
use_value_clip: True  # limit the value range
value_clip_range: 0.2
use_value_norm: True  # use running mean and std to normalize rewards.
use_huber_loss: True  # True: use huber loss; False: use MSE loss.
huber_delta: 10.0
use_advnorm: True  # use advantage normalization.
use_gae: True  # use GAE trick to calculate returns.
gae_lambda: 0.98
use_grad_clip: True  # gradient normalization
grad_clip_norm: 10.0
dim_message: 64   # message encode dim which is same to the recurrent dim
comm_passes: 2    # the number of the message encode times

running_steps: 1000000
eval_interval: 10000
test_episode: 16

log_dir: "./logs/commnet/3m"
model_dir: "./models/commnet/3m"
